/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : Rx1.h
**     Project     : EKG_Dongle
**     Processor   : MK22FN512VLH12
**     Component   : RingBuffer
**     Version     : Component 01.053, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-02-11, 10:41, # CodeGen: 74
**     Abstract    :
**         This component implements a ring buffer for different integer data type.
**     Settings    :
**          Component name                                 : Rx1
**          Buffer Size                                    : 64
**     Contents    :
**         Clear           - void Rx1_Clear(void);
**         Put             - uint8_t Rx1_Put(Rx1_ElementType elem);
**         Get             - uint8_t Rx1_Get(Rx1_ElementType *elemP);
**         Peek            - uint8_t Rx1_Peek(Rx1_BufSizeType index, Rx1_ElementType *elemP);
**         Update          - uint8_t Rx1_Update(Rx1_BufSizeType index, Rx1_ElementType *elemP);
**         Putn            - uint8_t Rx1_Putn(Rx1_ElementType *elem, Rx1_BufSizeType nof);
**         Getn            - uint8_t Rx1_Getn(Rx1_ElementType *buf, Rx1_BufSizeType nof);
**         Compare         - uint8_t Rx1_Compare(Rx1_BufSizeType index, Rx1_ElementType *elemP,...
**         Delete          - uint8_t Rx1_Delete(void);
**         NofElements     - Rx1_BufSizeType Rx1_NofElements(void);
**         NofFreeElements - Rx1_BufSizeType Rx1_NofFreeElements(void);
**         Deinit          - void Rx1_Deinit(void);
**         Init            - void Rx1_Init(void);
**
**Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**All Rights Reserved.
**
**Redistribution and use in source and binary forms, with or without modification,
**are permitted provided that the following conditions are met:
**
**o Redistributions of source code must retain the above copyright notice, this list
**  of conditions and the following disclaimer.
**
**o Redistributions in binary form must reproduce the above copyright notice, this
**  list of conditions and the following disclaimer in the documentation and/or
**  other materials provided with the distribution.
**
**o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**  contributors may be used to endorse or promote products derived from this
**  software without specific prior written permission.
**
**THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**http: www.freescale.com
**mail: support@freescale.com
** ###################################################################*/
/*!
** @file Rx1.h
** @version 01.00
** @brief
**         This component implements a ring buffer for different integer data type.
*/         
/*!
**  @addtogroup Rx1_module Rx1 module documentation
**  @{
*/         

#ifndef __Rx1_H
#define __Rx1_H

/* MODULE Rx1. */
#include "MCUC1.h" /* SDK and API used */
#include "Rx1config.h" /* configuration */

/* Include inherited components */
#include "MCUC1.h"
#include "CS1.h"


#ifdef __cplusplus
extern "C" {
#endif

#if Rx1_CONFIG_ELEM_SIZE==1
  typedef uint8_t Rx1_ElementType; /* type of single element */
#elif Rx1_CONFIG_ELEM_SIZE==2
  typedef uint16_t Rx1_ElementType; /* type of single element */
#elif Rx1_CONFIG_ELEM_SIZE==4
  typedef uint32_t Rx1_ElementType; /* type of single element */
#else
  #error "illegal element type size in properties"
#endif
#if Rx1_CONFIG_BUF_SIZE<256
  typedef uint8_t Rx1_BufSizeType; /* up to 255 elements (index 0x00..0xff) */
#else
  typedef uint16_t Rx1_BufSizeType; /* more than 255 elements, up to 2^16 */
#endif

uint8_t Rx1_Put(Rx1_ElementType elem);
/*
** ===================================================================
**     Method      :  Rx1_Put (component RingBuffer)
**     Description :
**         Puts a new element into the buffer
**     Parameters  :
**         NAME            - DESCRIPTION
**         elem            - New element to be put into the buffer
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Rx1_Get(Rx1_ElementType *elemP);
/*
** ===================================================================
**     Method      :  Rx1_Get (component RingBuffer)
**     Description :
**         Removes an element from the buffer
**     Parameters  :
**         NAME            - DESCRIPTION
**       * elemP           - Pointer to where to store the received
**                           element
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

Rx1_BufSizeType Rx1_NofElements(void);
/*
** ===================================================================
**     Method      :  Rx1_NofElements (component RingBuffer)
**     Description :
**         Returns the actual number of elements in the buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of elements in the buffer.
** ===================================================================
*/

void Rx1_Init(void);
/*
** ===================================================================
**     Method      :  Rx1_Init (component RingBuffer)
**     Description :
**         Initializes the data structure
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

Rx1_BufSizeType Rx1_NofFreeElements(void);
/*
** ===================================================================
**     Method      :  Rx1_NofFreeElements (component RingBuffer)
**     Description :
**         Returns the actual number of free elements/space in the
**         buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of elements in the buffer.
** ===================================================================
*/

void Rx1_Clear(void);
/*
** ===================================================================
**     Method      :  Rx1_Clear (component RingBuffer)
**     Description :
**         Clear (empty) the ring buffer.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t Rx1_Peek(Rx1_BufSizeType index, Rx1_ElementType *elemP);
/*
** ===================================================================
**     Method      :  Rx1_Peek (component RingBuffer)
**     Description :
**         Returns an element of the buffer without removiing it.
**     Parameters  :
**         NAME            - DESCRIPTION
**         index           - Index of element. 0 peeks the top
**                           element, 1 the next, and so on.
**       * elemP           - Pointer to where to store the received
**                           element
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

#define Rx1_Deinit() \
   /* nothing to deinitialize */
/*
** ===================================================================
**     Method      :  Rx1_Deinit (component RingBuffer)
**     Description :
**         Driver de-initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

uint8_t Rx1_Delete(void);
/*
** ===================================================================
**     Method      :  Rx1_Delete (component RingBuffer)
**     Description :
**         Removes an element from the buffer
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Rx1_Putn(Rx1_ElementType *elem, Rx1_BufSizeType nof);
/*
** ===================================================================
**     Method      :  Rx1_Putn (component RingBuffer)
**     Description :
**         Put a number new element into the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * elem            - Pointer to new elements to be put into
**                           the buffer
**         nof             - number of elements
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Rx1_Compare(Rx1_BufSizeType index, Rx1_ElementType *elemP, Rx1_BufSizeType nof);
/*
** ===================================================================
**     Method      :  Rx1_Compare (component RingBuffer)
**     Description :
**         Compares the elements in the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**         index           - Index of element. 0 peeks the top
**                           element, 1 the next, and so on.
**       * elemP           - Pointer to elements to compare with
**         nof             - number of elements to compare
**     Returns     :
**         ---             - zero if elements are the same, -1 otherwise
** ===================================================================
*/

uint8_t Rx1_Getn(Rx1_ElementType *buf, Rx1_BufSizeType nof);
/*
** ===================================================================
**     Method      :  Rx1_Getn (component RingBuffer)
**     Description :
**         Get a number elements into a buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * buf             - Pointer to buffer where to store the
**                           elements
**         nof             - number of elements
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

uint8_t Rx1_Update(Rx1_BufSizeType index, Rx1_ElementType *elemP);
/*
** ===================================================================
**     Method      :  Rx1_Update (component RingBuffer)
**     Description :
**         Updates the data of an element.
**     Parameters  :
**         NAME            - DESCRIPTION
**         index           - Index of element. 0 peeks the top
**                           element, 1 the next, and so on.
**       * elemP           - Pointer to where to store the received
**                           element
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* END Rx1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __Rx1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
